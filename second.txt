package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

/*
private void initTfod() {

    // Create the TensorFlow processor the easy way.
    tfod = TfodProcessor.easyCreateWithDefaults();


    
    

} 

*/

@TeleOp(name = "ONLY USE THIS MODE")
public class second extends LinearOpMode {

  
  private DcMotor right_drive;
  private DcMotor left_drive;
  private DcMotor arm;
  private Servo wheel_servo;
  private Servo rotate_servo;
  public float wheel_servo_pos;
  public float rotate_servo_pos;
  
  /**
   * This OpMode offers Tank Drive style TeleOp control for a direct drive robot.
   *
   * In this Tank Drive mode, the left and right joysticks (up
   * and down) drive the left and right motors, respectively.
   */
  @Override
  public void runOpMode() {
    wheel_servo_pos = 0.5f;
    rotate_servo_pos = 0.5f;
    right_drive = hardwareMap.get(DcMotor.class, "right_drive");
    left_drive = hardwareMap.get(DcMotor.class, "left_drive");
    arm = hardwareMap.get(DcMotor.class, "arm");
    wheel_servo = hardwareMap.get(Servo.class, "wheel_servo");
    rotate_servo = hardwareMap.get(Servo.class, "rotate_servo");
    // Reverse one of the drive motors.
    // You will have to determine which motor to reverse for your robot.
    // In this example, the right motor was reversed so that positive
    // applied power makes it move the robot in the forward direction.
    right_drive.setDirection(DcMotor.Direction.REVERSE);
    arm.setDirection(DcMotor.Direction.REVERSE);
    waitForStart();
    
    // because the only way to set direction for servos is 
    // to set their "position", in order to move sequentially you have to 
    // keep track of the servo's position in an external variable and 
    // slowly add to it
    
    
    
    if (opModeIsActive()) {
     
      System.out.println(gamepad1.right_trigger);
      
      // Put run blocks here.
      while (opModeIsActive()) {
       // servos position will always be set to the same variable, which should
       // update when x/y is clicked
        wheel_servo.setPosition(wheel_servo_pos);
        rotate_servo.setPosition(rotate_servo_pos);
      if(gamepad1.y) {
        wheel_servo_pos = wheel_servo_pos + 0.0001f;
        telemetry.addData("y: ", wheel_servo_pos);
        } 
      if (gamepad1.a) {
        wheel_servo_pos = wheel_servo_pos - 0.0001f;
        telemetry.addData("a: ", wheel_servo_pos);
      }
      if (gamepad1.x){
        rotate_servo_pos = rotate_servo_pos + 0.001f;
        
      }
      if (gamepad1.b) {
        rotate_servo_pos = rotate_servo_pos - 0.001f;
      }
   
   
   
   
   
    left_drive.setPower(-gamepad1.left_stick_y);
    right_drive.setPower(-gamepad1.right_stick_y);
    arm.setPower(gamepad1.right_bumper? 1.00 : 0.00);
    arm.setPower(gamepad1.left_bumper? -1.00 : 0.00);
      
    
    while (gamepad1.dpad_up){
      
     //rotate_servo.setPosition(1f);
      
    } 
    /*
    while (gamepad1.dpad_down){
      
      rotate_servo.setPosition(toFloat(0));
      //rotate_servo.setDirection(DcMotorSimple.Direction.REVERSE);
     
    }
    */
      /*if(gamepad1.a) {
        // move to 0 degrees.
        wheel_servo.setPosition(0);
        //telemetry.addData("y pressed", gamepad1);
    } else if (gamepad1.x || gamepad1.b) {
        // move to 90 degrees.
        wheel_servo.setPosition(0.5);
        //telemetry.addData("x or b pressed");
        
    }*/
        //wheel_servo.setPower(gamepad1.right_trigger? 1.00 : 0.00);
       // rotate_servo.setPower(gamepad1.left_trigger? -1.00 : 0.00);
        
        
        
        telemetry.addData("Left Pow", left_drive.getPower());
        telemetry.addData("Right Pow", right_drive.getPower());
        telemetry.addData("wheel position", wheel_servo.getPosition());
        
        telemetry.addData("arm", arm.getPower());
        telemetry.addData("um", gamepad1.x);
        telemetry.update();
        
        
      }
    }
  }
}
